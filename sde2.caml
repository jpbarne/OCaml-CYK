(** Prototype: get_table_values_cell([i;j],table)
Input(s): tuple of ([<column>;<row>], table)
Returned Value: cell with string values
Side Effects: none
Signature: val get_table_values_cell : int list * ’a list list -> ’a = <fun>
*) 

let get_table_values_cell = function
   | ([i; j], table) -> List.nth (List.nth table (j-1)) (i-1) 
   | (_, _) -> [];;
   
   
(**
Prototype: cell_products [cell1;cell2]
Input(s): list containing 2 cells
Returned Value: resultant list of strings
Side Effects: none
Signature: val cell_products : string list list -> string list = <fun>
*)

let rec one_product = function
  | (_, []) -> []
  | (i, strings) -> 
    List.append ((i ^ (List.hd strings))::[]) 
                (one_product (i, (List.tl strings)));;

let rec cell_products = function
  | [_; []]    -> []
  | [[]; _]    -> []
  | [cell1;cell2] -> List.append (one_product ((List.hd cell1), cell2)) 
                     (cell_products ([(List.tl cell1); cell2]))
  | _ -> [];; 

     
(**
Prototype: form_row1_cell(element,productions)
Input(s): tuple of single terminal element, productions list
Returned Value: corresponding cell in first row of CYK table
Side Effects: none
Signature: val form_row1_cell : ’a * ’a list list -> ’a list = <fun>
Notes: Forms row 1 cells of CYK table as a special case.
*)
let rec member = function 
  | (elem, []) -> false
  | (elem, lst)-> if elem = (List.hd lst) then true
                  else member (elem, (List.tl lst));;

let rec form_row1_cell = function
  | (_, []) -> []
  | (element, productions) -> 
    if (member(element, List.hd productions)) then 
      ( List.append ((List.hd (List.hd productions))::[]) 
        (form_row1_cell (element, List.tl productions)) )
    else form_row1_cell(element, List.tl productions);;  
   
(**
Prototype: equiv(ca, cb)
Inputs: tuple of 2 cells
Returned Value: true or false
Side Effects: none
Signature: val equiv : ’a list * ’a list -> bool = <fun>
*)
let rec shared = function 
  | ([], []) -> true
  | ([], _) -> true
  | (a, b) -> member (List.hd a, b) && shared ((List.tl a), b);;

let rec equiv (ca, cb) = 
  (List.length ca == List.length cb) && (shared (ca, cb)) && (shared (cb, ca));;
  
(**
Prototype: row_equivalent(rowA,rowB)
Inputs: tuple of 2 rows
Returned Value: true or false
Side Effects: none
Signature: val row_equivalent : ’a list list * ’a list list -> bool = <fun>
*)
let rec row_equivalent = function 
  | ([], []) -> true
  | (rowA, rowB) ->  (List.length rowA == List.length rowB) && 
                     (equiv (List.hd rowA, List.hd rowB)) && 
                     (row_equivalent (List.tl rowA, List.tl rowB));;
  
(**
Prototype: table_equivalent(tableA,tableB)
Inputs: tuple of 2 tables
Returned Value: true or false
Side Effects: none
Signature: val table_equivalent :
’a list list list * ’a list list list -> bool = <fun>
Notes:
*)
let rec table_equivalent = function
  | ([], []) -> true
  | (tableA, tableB) -> (List.length tableA == List.length tableB) &&
                        (row_equivalent (List.hd tableA, List.hd tableB)) &&
                        (table_equivalent (List.tl tableA, List.tl tableB));;  

(**
Prototype: valid_production production
Inputs: a list
Returned Value: true or false
Side Effects: none
Signature: val valid_production : string list -> bool = <fun>
Notes: true if production is valid format and CNF
*)
let rec capitalized (str, index) =
  if String.length str = index then true
  else ( ( (Char.code (String.get str index)) >= (Char.code 'A') ) &&
         ( (Char.code (String.get str index)) <= (Char.code 'Z') ) &&
         ( capitalized (str, index+1) ) );;

let valid_production production = 
  if ((List.nth production 0) = "S") then 
     (capitalized((List.nth production 1), 0) && 
      String.length (List.nth production 1) > 1)
  else ((capitalized((List.nth production 0), 0)) && 
        (String.length(List.nth production 0) = 1) &&
        (not(capitalized((List.nth production 1), 0))) );;
     
(**
Prototype: valid_production_list productionList
Inputs: list of productions
Returned Value: true or false
Side Effects: none
Signature: val valid_production_list : string list list -> bool = <fun>
Notes:
*)
let rec valid_production_list = function
  | [] -> true
  | productionList -> ( valid_production (List.hd productionList) &&
                        valid_production_list (List.tl productionList) );;
 
